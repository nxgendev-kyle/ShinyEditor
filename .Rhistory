usethis::use_readme_rmd()
library(ShinyEditor)
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("7p02e1tohxndorqcid61hh15w1gtla6wrjutj7mi73en667h"),
# Text Input 1
column(
width = 6,
tinymce('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(ShinyEditor)
runApp('inst/examples/simple-example.R')
library(shiny)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
use_editor("7p02e1tohxndorqcid61hh15w1gtla6wrjutj7mi73en667h"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
runApp('inst/examples/simple-example.R')
roxygen
roxygen2::roxygenize()
roxygen2::roxygenize()
library(shiny)
library(shinyjs)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
shinyjs::useShinyjs(),
use_editor("7p02e1tohxndorqcid61hh15w1gtla6wrjutj7mi73en667h"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
), actionButton("updatedata", "Update Editor", icon = icon("edit"))),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
observe({
req(input$mytext)
CopyButtonUpdate(session,
id = "copybtn",
label = "Copy to Clipboard",
icon = icon("copy"),
text = text.final()
)
})
}
# Run App
shinyApp(ui = ui, server = server)
runApp('inst/examples/detailed-example.R')
library(shiny)
library(shinyjs)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
shinyjs::useShinyjs(),
use_editor("7p02e1tohxndorqcid61hh15w1gtla6wrjutj7mi73en667h"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
), actionButton("updatedata", "Update Editor", icon = icon("edit"))),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
observeEvent(input$updatedata, {
UpdateEditor(session,
id = "textcontent",
text = "<b>Sample Text</b>")
})
}
# Run App
shinyApp(ui = ui, server = server)
roxygen2::roxygenize()
library(shiny); runApp('inst/examples/svg-button.R')
editor('textcontent', text = "Sample Text",
options = "branding: false,
height: 300,
plugins: ['lists', 'table', 'link', 'image', 'code'],
toolbar1: 'bold italic forecolor backcolor | formatselect fontselect fontsizeselect | alignleft aligncenter alignright alignjustify',
toolbar2: 'undo redo removeformat bullist numlist table blockquote code superscript  subscript strikethrough link image")
runApp('inst/examples/svg-button.R')
library(ShinyEditor)
runApp('inst/examples/simple-example.R')
runApp('inst/examples/update-editor.R')
roxygen2::roxygenise()
library(ShinyEditor)
detach("package:ShinyEditor", unload = TRUE)
remove.packages("ShinyEditor", lib="~/R/win-library/3.6")
remotes::install_github("deepanshu88/ShinyEditor")
3
library(shiny)
library(shinyjs)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
shinyjs::useShinyjs(),
use_editor("Enter-API-Key"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyjs)
library(ShinyEditor)
# UI
ui <- fluidPage(
# Setup
shinyjs::useShinyjs(),
use_editor("API-KEY"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
)),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
}
# Run App
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyjs)
library(ShinyEditor)
ui <- fluidPage(
# Setup
shinyjs::useShinyjs(),
use_editor("API-KEY"),
titlePanel("HTML Generator"),
# Text Input 1
fluidRow(
column(
width = 6,
editor('textcontent'),
br(),
actionButton(
"generatehtml",
"Generate HTML Code",
icon = icon("code"),
class = "btn-primary"
), actionButton("updatedata", "Update Editor", icon = icon("edit"))),
column(
width = 6,
tags$pre(textOutput("rawText"))
)
)
)
# Server
server <- function(input, output, session) {
# Generate HTML
observeEvent(input$generatehtml, {
shinyjs::runjs("Shiny.onInputChange('mytext', tinyMCE.get('textcontent').getContent());")
output$rawText <- renderText({
req(input$mytext)
enc2utf8(input$mytext)
})
})
observeEvent(input$updatedata, {
UpdateEditor(session,
id = "textcontent",
text = "<b>Sample Text</b>")
})
}
# Run App
shinyApp(ui = ui, server = server)
